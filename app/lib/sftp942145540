"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authOptions = void 0;
var github_1 = require("next-auth/providers/github");
var discord_1 = require("next-auth/providers/discord");
var headers_1 = require("next/headers");
var User_1 = require("../schemas/User");
var mongo_1 = require("../../util/mongo");
var createKey_1 = require("../../util/createKey");
exports.authOptions = {
    providers: [
        (0, github_1.default)({
            clientId: process.env.GITHUB_ID,
            clientSecret: process.env.GITHUB_SECRET,
        }),
        (0, discord_1.default)({
            clientId: process.env.DISCORD_CLIENT_ID,
            clientSecret: process.env.DISCORD_CLIENT_SECRET,
        }),
    ],
    pages: {
        signIn: "/login",
        signOut: "/auth/signout",
        error: "/auth/error",
        verifyRequest: "/auth/verify-request",
        newUser: "/auth/new-user", // New users will be directed here on first sign in (leave the property out if not of interest)
    },
    callbacks: {
        session: function (_a) {
            var session = _a.session, token = _a.token;
            return __awaiter(this, void 0, void 0, function () {
                var headersList, findUser, create;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: 
                        // Return a cookie value as part of the session
                        // This is read when `req.query.nextauth.includes("session") && req.method === "GET"`
                        //  session.someCookie = test;
                        return [4 /*yield*/, (0, mongo_1.default)()];
                        case 1:
                            // Return a cookie value as part of the session
                            // This is read when `req.query.nextauth.includes("session") && req.method === "GET"`
                            //  session.someCookie = test;
                            _b.sent();
                            headersList = (0, headers_1.headers)();
                            return [4 /*yield*/, User_1.default.findOne({ email: session.user.email })];
                        case 2:
                            findUser = _b.sent();
                            if (!findUser) {
                                create = new User_1.default({
                                    email: session.user.email,
                                    avatar: session.user.image,
                                    apiKey: (0, createKey_1.default)(),
                                    created: Date.now(),
                                    ip: headersList.get("X-Forwarded-For"),
                                    credits: 2000,
                                    limits: {
                                        left: 2000,
                                        total: 2000,
                                        lastRequest: new Date()
                                    },
                                });
                                create
                                    .save()
                                    .then(function (savedUser) { })
                                    .catch(function (error) {
                                    console.error("Error creating user:", error);
                                });
                            }
                            if (!!(findUser === null || findUser === void 0 ? void 0 : findUser.lastRequest)) return [3 /*break*/, 4];
                            return [4 /*yield*/, User_1.default.findOneAndUpdate({ email: session.user.email }, { $set: { lastRequest: Date.now() } })];
                        case 3:
                            _b.sent();
                            _b.label = 4;
                        case 4: return [2 /*return*/, session];
                    }
                });
            });
        },
        signIn: function (_a) {
            var user = _a.user, account = _a.account, profile = _a.profile, email = _a.email, credentials = _a.credentials;
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    return [2 /*return*/, true];
                });
            });
        },
    },
};

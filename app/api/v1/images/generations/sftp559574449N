"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = void 0;
var output_json_1 = require("../../../../../data/output.json"); // Adjust path if necessary
var deepinfra_1 = require("deepinfra");
var headers_1 = require("next/headers");
var server_1 = require("next/server");
var User_1 = require("../../../../schemas/User");
var mongo_1 = require("../../../../../util/mongo");
var rateLimiter = {
    windowSize: 60000,
    maxRequests: 15, // 15 requests per window
};
var dataLimit = new Map();
function limitByApiKey(apiKey) {
    return __awaiter(this, void 0, Promise, function () {
        var now, limitData, timeSinceLastRequest;
        return __generator(this, function (_a) {
            now = Date.now();
            limitData = dataLimit.get(apiKey);
            if (!limitData) {
                limitData = {
                    left: rateLimiter.maxRequests,
                    lastRequest: now,
                };
                dataLimit.set(apiKey, limitData);
            }
            timeSinceLastRequest = now - limitData.lastRequest;
            if (timeSinceLastRequest > rateLimiter.windowSize) {
                limitData.left = rateLimiter.maxRequests;
                limitData.lastRequest = now;
                dataLimit.set(apiKey, limitData);
                return [2 /*return*/, false];
            }
            if (limitData.left <= 0)
                return [2 /*return*/, true];
            limitData.left -= 1;
            limitData.lastRequest = now;
            dataLimit.set(apiKey, limitData);
            return [2 /*return*/, false];
        });
    });
}
function POST(req) {
    return __awaiter(this, void 0, void 0, function () {
        var authHeader, apiKeyMatch, apiKey, isRateLimited, userdata, body, model_1, restBody, modelExists, deepinfraModel, response, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 6, , 7]);
                    return [4 /*yield*/, (0, mongo_1.default)()];
                case 1:
                    _a.sent();
                    authHeader = (0, headers_1.headers)().get("Authorization");
                    if (!authHeader) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "The API Key is needed to access the API." }, { status: 401 })];
                    }
                    apiKeyMatch = authHeader.match(/^Bearer (.+)$/);
                    if (!apiKeyMatch) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "Invalid Authorization header format." }, { status: 400 })];
                    }
                    apiKey = apiKeyMatch[1];
                    return [4 /*yield*/, limitByApiKey(apiKey)];
                case 2:
                    isRateLimited = _a.sent();
                    if (isRateLimited) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "Rate limit exceeded" }, { status: 429 })];
                    }
                    return [4 /*yield*/, User_1.default.findOne({ apiKey: apiKey })];
                case 3:
                    userdata = _a.sent();
                    if (!userdata) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "The API Key doesn't exist in the database" }, { status: 403 })];
                    }
                    return [4 /*yield*/, req.json()];
                case 4:
                    body = _a.sent();
                    model_1 = body.model, restBody = __rest(body, ["model"]);
                    if (!model_1) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "Invalid Params: model is required" }, { status: 400 })];
                    }
                    modelExists = output_json_1.default === null || output_json_1.default === void 0 ? void 0 : output_json_1.default.data.find(function (m) { return m.id === model_1 && m.object === "images.generations"; });
                    if (!modelExists) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "Invalid or unsupported model name provided." }, { status: 400 })];
                    }
                    deepinfraModel = new deepinfra_1.TextToImage(model_1, process.env.DEEPINFRA_API_KEY);
                    return [4 /*yield*/, deepinfraModel.generate({
                            prompt: body.prompt,
                            height: body.height,
                            width: body.width,
                            prompt_upsampling: true,
                            seed: body.seed
                        })];
                case 5:
                    response = _a.sent();
                    if (response === null || response === void 0 ? void 0 : response.image_url) {
                        return [2 /*return*/, server_1.NextResponse.json({ data: response.image_url }, { status: 200 })];
                    }
                    else {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "Image generation failed" }, { status: 500 })];
                    }
                    return [3 /*break*/, 7];
                case 6:
                    error_1 = _a.sent();
                    console.error("Error in POST handler:", error_1);
                    return [2 /*return*/, server_1.NextResponse.json({ error: "Internal Server Error" }, { status: 500 })];
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;

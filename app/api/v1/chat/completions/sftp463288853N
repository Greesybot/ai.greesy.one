"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GET = exports.POST = void 0;
var output_json_1 = require("../../../../../data/output.json");
var headers_1 = require("next/headers");
var server_1 = require("next/server");
var User_1 = require("../../../../schemas/User");
var mongo_1 = require("../../../../../util/mongo");
var handleGreesyAi_1 = require("../../../../../util/handleGreesyAi");
var rateLimiter = {
    windowSize: 60000,
    maxRequests: 15, // 5 requests per window
};
var dataLimit = new Map();
function limitByApiKey(apiKey) {
    return __awaiter(this, void 0, void 0, function () {
        var now, limitData, timeSinceLastRequest;
        return __generator(this, function (_a) {
            now = Date.now();
            limitData = dataLimit.get(apiKey);
            // If no data exists for the API key, initialize it
            if (!limitData) {
                limitData = {
                    left: rateLimiter.maxRequests,
                    lastRequest: now,
                };
                dataLimit.set(apiKey, limitData);
            }
            timeSinceLastRequest = now - limitData.lastRequest;
            // Reset window if the time since the last request exceeds the window size
            if (timeSinceLastRequest > rateLimiter.windowSize) {
                limitData.left = rateLimiter.maxRequests;
                limitData.lastRequest = now;
                dataLimit.set(apiKey, limitData); // Update the Map
                return [2 /*return*/, false]; // Not rate-limited
            }
            // Check if the user has remaining requests
            if (limitData.left <= 0)
                return [2 /*return*/, true]; // Rate-limited
            // Deduct a request from the remaining limit and update the last request time
            limitData.left -= 1;
            limitData.lastRequest = now;
            dataLimit.set(apiKey, limitData); // Update the Map
            return [2 /*return*/, false]; // Not rate-limited
        });
    });
}
function fetchFromProvider(url, options) {
    return __awaiter(this, void 0, void 0, function () {
        var response, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, fetch(url, options)];
                case 1:
                    response = _a.sent();
                    if (!response.ok) {
                        console.error("Provider response not OK: ".concat(response.status, " ").concat(response.statusText));
                        throw new Error("Provider response not OK: ".concat(response.statusText));
                    }
                    return [4 /*yield*/, response.json()];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    error_1 = _a.sent();
                    console.error("Fetch error: ".concat(error_1.message));
                    throw error_1;
                case 4: return [2 /*return*/];
            }
        });
    });
}
function getProviderAndModel(modelId) {
    var modelData = output_json_1.default.data.find(function (model) { return model.id === modelId; });
    if (!modelData)
        throw new Error("Model not found: ".concat(modelId));
    return {
        premium: modelData.premium,
        providers: modelData.providers,
        model: {
            name: modelData.id,
            object: modelData.object,
            description: modelData.description,
            created: modelData.created,
            owned_by: modelData.owned_by,
        },
    };
}
function POST(req) {
    return __awaiter(this, void 0, void 0, function () {
        var authHeader, apiKey, isRateLimited, userdata, requestData, model, tools, messages, response_format, max_tokens, top_p, top_k, temperature, _a, premium, providers, modelInfo, _i, providers_1, provider, response, _b, error_2, error_3;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 18, , 19]);
                    return [4 /*yield*/, (0, mongo_1.default)()];
                case 1:
                    _c.sent();
                    authHeader = (0, headers_1.headers)().get("Authorization");
                    if (!authHeader) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "The API Key is needed to access the API." }, { status: 401 })];
                    }
                    apiKey = authHeader.split("Bearer ")[1];
                    return [4 /*yield*/, limitByApiKey(apiKey)];
                case 2:
                    isRateLimited = _c.sent();
                    if (isRateLimited) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "Rate limit exceeded" }, { status: 429 })];
                    }
                    return [4 /*yield*/, User_1.default.findOne({ apiKey: apiKey })];
                case 3:
                    userdata = _c.sent();
                    if (!userdata) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "The API Key doesn't exist in the database" }, { status: 403 })];
                    }
                    return [4 /*yield*/, req.json()];
                case 4:
                    requestData = _c.sent();
                    model = requestData.model, tools = requestData.tools, messages = requestData.messages, response_format = requestData.response_format, max_tokens = requestData.max_tokens, top_p = requestData.top_p, top_k = requestData.top_k, temperature = requestData.temperature;
                    if (!model) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "Invalid Params: model is required" }, { status: 400 })];
                    }
                    _a = getProviderAndModel(model), premium = _a.premium, providers = _a.providers, modelInfo = _a.model;
                    if (premium && !userdata.premium) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: "This model requires a Premium Subscription" }, { status: 402 })];
                    }
                    _i = 0, providers_1 = providers;
                    _c.label = 5;
                case 5:
                    if (!(_i < providers_1.length)) return [3 /*break*/, 17];
                    provider = providers_1[_i];
                    _c.label = 6;
                case 6:
                    _c.trys.push([6, 15, , 16]);
                    response = void 0;
                    _b = provider;
                    switch (_b) {
                        case "greesyai": return [3 /*break*/, 7];
                        case "openrouter": return [3 /*break*/, 9];
                        case "pocketai": return [3 /*break*/, 11];
                    }
                    return [3 /*break*/, 13];
                case 7: return [4 /*yield*/, (0, handleGreesyAi_1.handleGreesyAi)(model, messages)];
                case 8:
                    response = _c.sent();
                    return [3 /*break*/, 14];
                case 9: return [4 /*yield*/, fetchFromProvider("https://openrouter.ai/api/v1/chat/completions", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Authorization: "Bearer ".concat(process.env.OPENROUTER_API_KEY),
                        },
                        body: JSON.stringify({
                            model: modelInfo.name,
                            tools: tools,
                            messages: messages,
                            max_tokens: max_tokens !== null && max_tokens !== void 0 ? max_tokens : 1024,
                            temperature: temperature !== null && temperature !== void 0 ? temperature : 1,
                            top_p: top_p,
                            response_format: response_format,
                            top_k: top_k,
                        }),
                    })];
                case 10:
                    response = _c.sent();
                    return [3 /*break*/, 14];
                case 11: return [4 /*yield*/, fetchFromProvider("https://pocket.holabo.co/v1/chat/completions", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Authorization: "Bearer ".concat(process.env.POCKETAI_API_KEY),
                        },
                        body: JSON.stringify({
                            model: modelInfo.name.split("/")[1],
                            tools: tools,
                            messages: messages,
                            max_tokens: max_tokens !== null && max_tokens !== void 0 ? max_tokens : 1024,
                            temperature: temperature !== null && temperature !== void 0 ? temperature : 1,
                            top_p: top_p,
                            response_format: response_format,
                            top_k: top_k,
                        }),
                    })];
                case 12:
                    response = _c.sent();
                    return [3 /*break*/, 14];
                case 13:
                    console.warn("Provider ".concat(provider, " not supported"));
                    return [3 /*break*/, 16];
                case 14:
                    if (!response || !response.choices || response.choices.length === 0) {
                        console.error("Invalid response from provider ".concat(provider));
                        return [3 /*break*/, 16];
                    }
                    return [2 /*return*/, server_1.NextResponse.json({
                            id: response.id,
                            model: model,
                            object: response.object,
                            created: response.created,
                            choices: response.choices,
                        }, {
                            status: 200,
                            headers: {
                                "Access-Control-Allow-Origin": "*",
                                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE",
                                "Access-Control-Allow-Headers": "Content-Type, Authorization",
                            },
                        })];
                case 15:
                    error_2 = _c.sent();
                    console.error("Error with provider ".concat(provider, ": ").concat(error_2.message));
                    return [3 /*break*/, 16];
                case 16:
                    _i++;
                    return [3 /*break*/, 5];
                case 17: throw new Error("No available providers succeeded.");
                case 18:
                    error_3 = _c.sent();
                    console.error("Error: ".concat(error_3.message));
                    return [2 /*return*/, server_1.NextResponse.json({ error: "Provider Error: Unable to process the request." }, { status: 500 })];
                case 19: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;
function GET(req) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, server_1.NextResponse.json({ message: "GET request not implemented" }, { status: 501 })];
        });
    });
}
exports.GET = GET;
